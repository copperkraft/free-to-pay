/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import { Group, Mesh } from 'three';
import React, { MutableRefObject, useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader';
import { useFrame } from '@react-three/fiber';

type GLTFResult = GLTF & {
  nodes: {
    point: THREE.Mesh
    cone: THREE.Mesh
    circle: THREE.Mesh
  }
};

interface PointerProps {
  pointer: MutableRefObject<Group>
}

export const Pointer: React.FC<PointerProps> = ({ pointer }: PointerProps) => {
  const { nodes } = useGLTF('/free-to-pay/models/pointer.glb') as GLTFResult;
  const cone = useRef<Mesh>(null!);

  useFrame(({ clock }, delta) => {
    pointer.current.rotateY(delta * 2);
    cone.current.position.setY(Math.sin(clock.elapsedTime * 5) * 0.2 + 1);
  });

  return (
    <group scale={[2, 2, 2]} ref={pointer} dispose={null}>
      <mesh geometry={nodes.point.geometry} material={nodes.point.material} />
      <mesh
        ref={cone}
        geometry={nodes.cone.geometry}
        material={nodes.cone.material}
        position={[0, 1.01, 0]}
        scale={[0.51, -0.68, 0.51]}
      />
      <mesh geometry={nodes.circle.geometry} material={nodes.circle.material} />
    </group>
  );
};

useGLTF.preload('/free-to-pay/models/pointer.glb');
