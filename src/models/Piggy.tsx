/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React, { useEffect, useRef } from 'react';
import { useAnimations, useGLTF } from '@react-three/drei';
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader';
import { CharacterState } from '../utils/characterState.enum';

type GLTFResult = GLTF & {
  nodes: {
    Cube003: THREE.SkinnedMesh
    Cube003_1: THREE.SkinnedMesh
    piggy_booty: THREE.Bone
  }
  materials: {
    ['pig body']: THREE.MeshStandardMaterial
    fangs: THREE.MeshStandardMaterial
  }
};

type ActionName = 'average piggy speed' | 'piggy\'s resting state';
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

interface PiggyProps {
  characterState: CharacterState;
}

export function Piggy({ characterState }: PiggyProps) {
  const group = useRef<THREE.Group>();
  const { nodes, materials, animations } = useGLTF('/free-to-pay/models/piggy.glb') as GLTFResult;
  const { actions } = useAnimations(animations, group) as unknown as { actions: GLTFActions };
  useEffect(() => {
    if (characterState === CharacterState.IDLE) {
      actions['piggy\'s resting state'].reset().fadeIn(0.2).play();
      return () => { actions['piggy\'s resting state'].fadeOut(0.5); };
    }

    actions['average piggy speed'].timeScale = 2;
    actions['average piggy speed'].reset().play();
    return () => { actions['average piggy speed'].fadeOut(0.2); };
  }, [characterState]);

  return (
    <group ref={group} dispose={null}>
      <group position={[0, 0.2, -0.49]}>
        <primitive object={nodes.piggy_booty} />
        <group name="pig">
          <skinnedMesh
            geometry={nodes.Cube003.geometry}
            material={materials['pig body']}
            skeleton={nodes.Cube003.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Cube003_1.geometry}
            material={materials.fangs}
            skeleton={nodes.Cube003_1.skeleton}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload('/piggy.glb');
