{"version":3,"sources":["utils/useKeyPress.ts","models/Pumpkman.tsx","components/Character.tsx","reportWebVitals.ts","textures/gravel/gravel_ground_01_diff_1k.jpg","textures/gravel/gravel_ground_01_disp_1k.jpg","textures/gravel/gravel_ground_01_nor_1k.jpg","textures/gravel/gravel_ground_01_rough_1k.jpg","textures/gravel/gravel_ground_01_ao_1k.jpg","components/Level.tsx","components/GameScene.tsx","core/Game.tsx","App.tsx","index.tsx"],"names":["useKeyPress","key","useState","isDown","set","keys","Array","isArray","handleKeyDown","useCallback","event","includes","code","handleKeyUp","handleWindowBlur","useEffect","window","addEventListener","removeEventListener","Pumpkman","group","useRef","useGLTF","nodes","materials","ref","dispose","rotation","Math","PI","position","scale","geometry","Cube","material","head","Cube_1","tail","Cube_2","eyes","Cube_3","body","vest","pants","preload","pigSize","pigLegSize","Character","box","up","down","left","right","velocity","Vector3","useControls","speed","inertia","useFrame","state","delta","current","lerp","normalize","length","setRotationFromAxisAngle","atan2","x","z","addScaledVector","args","attach","color","onPerfEntry","Level","size","terrain","useTexture","mapUrl","displacementUrl","normalUrl","roughUrl","aoUrl","map","displacement","normal","rough","ao","forEach","texture","wrapS","MirroredRepeatWrapping","wrapT","repeat","anisotropy","visible","roughnessMap","normalMap","aoMap","roughness","metalness","opacity","transparent","levelSize","GameScene","children","intensity","Game","onCreated","gl","setClearColor","PerspectiveCamera","makeDefault","MapControls","enabled","fallback","App","style","height","width","ReactDOM","render","StrictMode","document","getElementById","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.5d92f61e.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\n\nexport const useKeyPress = (key: string | string[]): boolean => {\n  const [isDown, set] = useState(false);\n  const keys = Array.isArray(key) ? key : [key];\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (!isDown && keys.includes(event.code)) {\n        set(true);\n      }\n    },\n    [...keys, isDown],\n  );\n  const handleKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (isDown && keys.includes(event.code)) {\n        set(false);\n      }\n    },\n    [...keys, isDown],\n  );\n\n  const handleWindowBlur = useCallback(() => {\n    set(false);\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    window.addEventListener('blur', handleWindowBlur);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n      window.removeEventListener('blur', handleWindowBlur);\n    };\n  }, [handleKeyDown, handleKeyUp, handleWindowBlur]);\n\n  return isDown;\n};\n","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport * as THREE from 'three';\nimport React, { useRef } from 'react';\nimport { useGLTF } from '@react-three/drei';\nimport { GLTF } from 'three/examples/jsm/loaders/GLTFLoader';\n\ntype GLTFResult = GLTF & {\n  nodes: {\n    Cube: THREE.Mesh\n    Cube_1: THREE.Mesh\n    Cube_2: THREE.Mesh\n    Cube_3: THREE.Mesh\n    vest: THREE.Mesh\n    pants: THREE.Mesh\n    pig: THREE.Mesh\n  }\n  materials: {\n    head: THREE.MeshStandardMaterial\n    tail: THREE.MeshStandardMaterial\n    eyes: THREE.MeshStandardMaterial\n    body: THREE.MeshStandardMaterial\n    vest: THREE.MeshStandardMaterial\n  }\n};\n\nexport const Pumpkman = () => {\n  const group = useRef<THREE.Group>();\n  const { nodes, materials } = useGLTF('/free-to-pay/models/pumpkman.glb') as GLTFResult;\n  return (\n    <group ref={group} dispose={null} rotation={[0, -Math.PI / 2, 0]} position={[0, -0.5, 0]}>\n      <group position={[-0.2, 2.41, 0]} scale={[0.21, 0.21, 0.21]}>\n        <mesh geometry={nodes.Cube.geometry} material={materials.head} />\n        <mesh geometry={nodes.Cube_1.geometry} material={materials.tail} />\n        <mesh geometry={nodes.Cube_2.geometry} material={materials.eyes} />\n        <mesh geometry={nodes.Cube_3.geometry} material={materials.body} />\n      </group>\n      <mesh\n        geometry={nodes.vest.geometry}\n        material={nodes.vest.material}\n        position={[-0.2, 2.41, 0]}\n        scale={[0.21, 0.21, 0.21]}\n      />\n      <mesh\n        geometry={nodes.pants.geometry}\n        material={nodes.pants.material}\n        position={[-0.2, 2.41, 0]}\n        scale={[0.21, 0.21, 0.21]}\n      />\n    </group>\n  );\n};\n\nuseGLTF.preload('/free-to-pay/models/pumpkman.glb');\n","import React, { useRef } from 'react';\nimport { Mesh, Vector3 } from 'three';\nimport { Cylinder } from '@react-three/drei';\nimport { useFrame } from '@react-three/fiber';\nimport { useControls } from 'leva';\nimport { useKeyPress } from '../utils/useKeyPress';\nimport { Pumpkman } from '../models/Pumpkman';\n\nconst pigSize: [number, number, number] = [0.5, 0.4, 1.2];\nconst pigLegSize: [number, number, number] = [0.2, 0.1, 0.6];\n\nexport function Character() {\n  const box = useRef<Mesh>(null!);\n  const up = useKeyPress(['ArrowUp', 'KeyW']);\n  const down = useKeyPress(['ArrowDown', 'KeyS']);\n  const left = useKeyPress(['ArrowLeft', 'KeyA']);\n  const right = useKeyPress(['ArrowRight', 'KeyD']);\n  const velocity = useRef(new Vector3(0, 0, 0));\n  const { speed, inertia } = useControls({ speed: 10, inertia: 5 });\n\n  useFrame((state, delta) => {\n    velocity.current.lerp(new Vector3(\n      (-left + (+right)),\n      0,\n      (-up + (+down)),\n    ).normalize(), 1 / inertia / speed);\n\n    if (velocity.current.length() > 1) {\n      velocity.current.normalize();\n    }\n\n    box.current.setRotationFromAxisAngle(\n      new Vector3(0, 1, 0),\n      Math.atan2(velocity.current.x, velocity.current.z),\n    );\n    box.current.position.addScaledVector(velocity.current, delta * speed);\n  });\n\n  return (\n    <group ref={box} position={[0, 0.75, 0]}>\n      <Cylinder args={pigSize} rotation={[Math.PI / 2, 0, 0]} position={[0, 0, 0]}>\n        <meshStandardMaterial attach=\"material\" color=\"pink\" />\n      </Cylinder>\n      <Cylinder args={[0.2, 0.4, 0.8]} rotation={[Math.PI / 2, 0, 0]} position={[0, 0.1, 0.75]}>\n        <meshStandardMaterial attach=\"material\" color=\"pink\" />\n      </Cylinder>\n      <Cylinder args={pigLegSize} position={[0.2, -0.5, 0.3]}>\n        <meshStandardMaterial attach=\"material\" color=\"pink\" />\n      </Cylinder>\n      <Cylinder args={pigLegSize} position={[-0.2, -0.5, 0.3]}>\n        <meshStandardMaterial attach=\"material\" color=\"pink\" />\n      </Cylinder>\n      <Cylinder args={pigLegSize} position={[0.2, -0.5, -0.2]}>\n        <meshStandardMaterial attach=\"material\" color=\"pink\" />\n      </Cylinder>\n      <Cylinder args={pigLegSize} position={[-0.2, -0.5, -0.2]}>\n        <meshStandardMaterial attach=\"material\" color=\"pink\" />\n      </Cylinder>\n\n      <group>\n        <Pumpkman />\n      </group>\n    </group>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nexport const reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n","export default __webpack_public_path__ + \"static/media/gravel_ground_01_diff_1k.388a9c56.jpg\";","export default __webpack_public_path__ + \"static/media/gravel_ground_01_disp_1k.f7972ada.jpg\";","export default __webpack_public_path__ + \"static/media/gravel_ground_01_nor_1k.90f13fb6.jpg\";","export default __webpack_public_path__ + \"static/media/gravel_ground_01_rough_1k.75a0f41e.jpg\";","export default __webpack_public_path__ + \"static/media/gravel_ground_01_ao_1k.0864f47a.jpg\";","import React, { useRef } from 'react';\n\nimport { Mesh, MirroredRepeatWrapping } from 'three';\nimport { Plane, useTexture } from '@react-three/drei';\nimport mapUrl from '../textures/gravel/gravel_ground_01_diff_1k.jpg';\nimport displacementUrl from '../textures/gravel/gravel_ground_01_disp_1k.jpg';\nimport normalUrl from '../textures/gravel/gravel_ground_01_nor_1k.jpg';\nimport roughUrl from '../textures/gravel/gravel_ground_01_rough_1k.jpg';\nimport aoUrl from '../textures/gravel/gravel_ground_01_ao_1k.jpg';\n\ninterface LevelProps {\n  size: [number, number];\n}\n\nexport const Level: React.FC<LevelProps> = ({ size }: LevelProps) => {\n  const terrain = useRef<Mesh>(null!);\n  const [\n    map,\n    displacement,\n    normal,\n    rough,\n    ao,\n  ] = useTexture([\n    mapUrl,\n    displacementUrl,\n    normalUrl,\n    roughUrl,\n    aoUrl,\n  ]);\n\n  [map, displacement, normal, rough, ao].forEach((texture) => {\n    if (texture.wrapS === MirroredRepeatWrapping) {\n      return;\n    }\n    /* eslint-disable no-param-reassign */\n    texture.wrapS = MirroredRepeatWrapping;\n    texture.wrapT = MirroredRepeatWrapping;\n    texture.repeat.set(6, 6);\n    texture.anisotropy = 4;\n    /* eslint-enable no-param-reassign */\n  });\n\n  return (\n    <Plane\n      visible\n      position={[0, 0, 0]}\n      rotation={[-Math.PI / 2, 0, 0]}\n      ref={terrain}\n      args={size}\n    >\n      <meshStandardMaterial\n        map={map}\n        roughnessMap={rough}\n        normalMap={normal}\n        aoMap={ao}\n        attach=\"material\"\n        roughness={1}\n        metalness={0}\n        opacity={1}\n        transparent\n      />\n    </Plane>\n  );\n};\n","import React, { PropsWithChildren } from 'react';\nimport { Character } from './Character';\nimport { Level } from './Level';\n\ninterface GameSceneProps {}\n\nconst levelSize: [number, number] = [40, 40];\n\nexport const GameScene: React.FC<GameSceneProps> = ({\n  children,\n}: PropsWithChildren<GameSceneProps>) => (\n  <>\n    <Level size={levelSize} />\n    <pointLight color=\"white\" intensity={2} position={[10, 10, 5]} />\n    <ambientLight color=\"yellow\" intensity={0.2} />\n    <Character />\n    {children}\n  </>\n);\n","import React, { Suspense } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { MapControls, PerspectiveCamera } from '@react-three/drei';\nimport { GameScene } from '../components/GameScene';\n\nexport const Game: React.FC = () => (\n  <Canvas\n    onCreated={({ gl }) => {\n      gl.setClearColor('#000000');\n    }}\n  >\n    <axesHelper />\n    <PerspectiveCamera makeDefault position={[0, 20, 15]} />\n    <MapControls enabled />\n    <Suspense fallback={null}>\n      <GameScene />\n    </Suspense>\n  </Canvas>\n);\n","import React from 'react';\nimport { Game } from './core/Game';\n\nexport const App = () => (\n  <div\n    style={{\n      height: '100vh',\n      width: '100vw',\n    }}\n  >\n    <Game />\n  </div>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport { reportWebVitals } from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}